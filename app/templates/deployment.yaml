apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.application.name }}
  name: {{ .Values.application.name }}
  namespace: {{ .Values.application.namespace }}
spec:
  replicas: {{ .Values.application.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.application.name }}
  template:
    metadata:
      {{- if (.Values.extensions).metrics }}
      annotations:
        prometheus.io/port: "9102"
        prometheus.io/scrape: "true"
      {{- end }}
      labels:
        app: {{ .Values.application.name }}
    spec:
      {{- if .Values.affinity }}
        {{- if .Values.affinity.node }}
        tolerations:
          - key: node-role.kubernetes.io
            value: {{ .Values.affinity.node }}
            operator: Equal
            effect: NoSchedule
        {{- end }}
        affinity:
          {{- if .Values.affinity.node }}
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node-role.kubernetes.io
                      operator: In
                      values:
                        - {{ .Values.affinity.node }}
          {{- end }}
          {{- if .Values.affinity.podAntiAffinity }}
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app: {{ .Values.application.name }}
                  topologyKey: "kubernetes.io/hostname"
                weight: 50
          {{- end }}
        {{- end }}
        {{- if (.Values.extensions).podTopologySpread }}
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                app: {{ .Values.application.name }}
        {{- end }}
        {{- if .Values.serviceAccountName }}
        serviceAccountName: {{ .Values.serviceAccountName }}
        {{- end }}
        containers:
        {{- range $key, $value := (.Values.application).containers }}
          - image: {{ $value.image }}:{{ $value.version }}
            name: {{ $value.name }}
            ports:
              - containerPort: 8080
                name: http
              {{- if ($.Values.extensions).metrics }}
              - containerPort: 9102
                name: metrics
              {{- end }}
            {{- if $value.probes }}
            {{- if $value.probes.readiness }}
            readinessProbe:
              httpGet:
                path: {{ $value.probes.readiness.path | default "/ready" | quote }}
                port: 8080
              initialDelaySeconds: {{ $value.probes.readiness.initialDelaySeconds | default 5 }}
              periodSeconds: {{ $value.probes.readiness.periodSeconds | default 5 }}
              {{- if hasKey $value.probes.readiness "timeoutSeconds" }}
              timeoutSeconds: {{ $value.probes.readiness.timeoutSeconds }}
              {{- end }}
            {{- end }}
            {{- if $value.probes.liveness }}
            livenessProbe:
              httpGet:
                path: {{ $value.probes.liveness.path | default "/alive" | quote }}
                port: 8080
              initialDelaySeconds: {{ $value.probes.liveness.initialDelaySeconds | default 30 }}
              {{- if hasKey $value.probes.liveness "periodSeconds" }}
              periodSeconds: {{ $value.probes.liveness.periodSeconds }}
              {{- end }}
              {{- if hasKey $value.probes.liveness "timeoutSeconds" }}
              timeoutSeconds: {{ $value.probes.liveness.timeoutSeconds }}
              {{- end }}
            {{- end }}
            {{- end }}
            env:
              - name: APP_NAME
                value: {{ $value.name }}
              - name: SERVER_PORT
                value: "8080"
              {{- if ($.Values.extensions).metrics }}
              - name: PROMETHEUS_PORT
                value: "9102"
              {{- end }}
              {{- if $.Values.ingress }}
              - name: HTTP_SERVER_ROOT_PATH
                {{- if hasKey .Values.ingress "path" }}
                value: {{ .Values.ingress.path }}
                {{- else }}
                value: "/"
                {{- end }}
              {{- end }}
              {{- range $key, $value := $.Values.configs }}
              - name: {{ $key }}
                valueFrom:
                  configMapKeyRef:
                    key: {{ $value.key }}
                    name: {{ $value.name }}
              {{- end }}
              {{- range $key, $value := $.Values.fields }}
              - name: {{ $key }}
                valueFrom:
                  fieldRef:
                    fieldPath: {{ $value }}
              {{- end }}
            {{- if ($value.environment).environment }}
            {{- if gt (len ($value.environment).environment) 0 }}
            envFrom:
              - configMapRef:
                  name: {{ printf "%s-%s" $.Values.application.name $value.name }}
            {{- end }}
            {{- end }}
            resources:
              limits:
                {{- if ((($value.resources).cpu).limit) }}
                cpu: {{ ((($value.resources).cpu).limit) | quote }}
                {{- end }}
                memory: {{ ((($value.resources).memory).limit) }}
              requests:
                cpu: {{  ((($value.resources).cpu).request) | quote }}
                memory: {{ ((($value.resources).memory).request) }}
        {{- end }}
